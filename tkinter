#что сделать:
#1)доделать перенос вывода текста в индикатор
#2)понять как очищать поле, чтобы текст не накапливался.
#3)Изучить как выводить кнопки при определенном условии.
#4)canvas - это "холст". Его можно отрисовать, указывая размеры, положение. Разобраться
#после: доработать рынок

#старая, рабочая версия в файле game архив

import random
from tkinter import *
from contextlib import redirect_stdout




class person:
    def __init__(self, name, maxhp, hp, dmg, arm, pen):
        self.name = name
        self.maxhp = maxhp
        self.hp = hp
        self.dmg = dmg
        self.arm = arm
        self.pen = pen


# игрок
player_hp = random.randint(170, 200)
player_dmg = random.randint(7, 10)
player_arm = random.randint(0, 3)
player_pen = random.randint(0, 3)

player = person("knight", player_hp, player_hp, player_dmg, player_arm, player_pen)

# счетчики
grade = 1
level = 0
gold = 9990

status = "Вы в лагере"



def fight():
    global person, player, grade, level, gold
    enemy = person("monster", 0, random.randint(15, 20), random.randint(1, 3), random.randint(0, 1), random.randint(0, 1))
    print("---сражение", file=TextWrapper(text))
    print(vars(player), file=indicatorWrapper(indicator))
    print(vars(enemy), file=TextWrapper(text))
    print("-", file=TextWrapper(text))
    r = 0
    while True:
        if player.hp > 0 and enemy.hp > 0:
            player.hp -= enemy.dmg + random.randint(0, 7) + level + grade - max(player.arm - enemy.pen, 0)
            enemy.hp -= player.dmg + random.randint(0, 7) - max(enemy.arm - player.pen, 0)
            r += 1
            with redirect_stdout(TextWrapper(text)):
            	print("раунд: ", r)
            	print(str(player.hp) + " (-" + str(enemy.dmg + random.randint(0, 7) + level + grade - max(player.arm - enemy.pen, 0)) + ")")
            	print(str(enemy.hp) + " (-" + str(player.dmg + random.randint(0, 7) - max(enemy.arm - player.pen, 0)) + ")")
        else:
            if player.hp > 0:
                print("победа", file=TextWrapper(text))
                gold += (random.randint(3, 5) + level)
                print("---золото - " + str(gold), file=goldWrapper(goldtk))
                return gold, player
            else:
                print("поражение. Игра окончена", file=TextWrapper(text))
                if player.hp < 0:
                    print("-")
                    print("---игра окончена. результат:", file=TextWrapper(text))
                    print("кол-во спусков: " + str(grade), file=TextWrapper(text))
                return player


def rest():
    global player
    player.hp = min(player.maxhp, player.hp + 10)
    print("---безопасное место. вы воссстановили часть здоровья", file=TextWrapper(text))
    print(vars(player), file=indicatorWrapper(indicator))
    return player


# функция ловушки
def trap():
    global player
    player.hp -= 10
    print("---it's a trap!. Вы потеряли часть здоровья", file=TextWrapper(text))
    print(vars(player), file=indicatorWrapper(indicator))
    return player


def down():
    global status, level, act
    status = "подземелье"
    delbotton()
    btn_down.grid()
    btn_up.grid()
    print(status, file=statusWrapper(statustk))
    print("-", file=TextWrapper(text))
    f = random.choices([fight, rest, trap], weights=[5, 1, 1])
    rand_func = random.choice(f)
    rand_func()
    level += 1
    print("---уровень подземелья - " + str(level), file=levelWrapper(leveltk))
    return level, status


def up():
    global status, level, grade, player, player_hp
    delbotton()
    btn_down.grid(row=0, column=0)
    btn_up.grid(row=1, column=0)
    if level == 0:
        status = "вы в лагере"
        print(status, file=statusWrapper(statustk))
        print(vars(player), file=indicatorWrapper(indicator))
    elif level > 1:
        level -= 1
        print(status, file=statusWrapper(statustk))
        print("---вы возвращаетесь в лагерь", file=TextWrapper(text))
        print("---уровень подземелья - " + str(level), file=levelWrapper(leveltk))
        f = random.choices([fight, rest, trap], weights=[1, 7, 1])
        rand_func = random.choice(f)
        rand_func()
        return level
    else:
        level = 0
        grade += 1
        status = "вы в лагере"
        delbotton()
        btn_down.grid(row=0, column=0)
        btn_market.grid(row=1, column=0)
        player.hp = min(player.maxhp, player.hp + 20)
        print(status, file=statusWrapper(statustk))
        print("---вы вернулись. Оно того стоило?", file=TextWrapper(text))
        print("---уровень подземелья - " + str(level), file=levelWrapper(leveltk))
        return status, grade


def market():
    global status, act, gold, player, player_hp
    status = "магазин"
    print(vars(player), file=indicatorWrapper(indicator))
    print(status, file=statusWrapper(statustk))
    print("---золото - " + str(gold), file=goldWrapper(goldtk))
    class item:
        def __init__(self, name, maxhp, hp, dmg, arm, pen, price):
            self.name = name
            self.maxhp = maxhp
            self.hp = hp
            self.dmg = dmg
            self.arm = arm
            self.pen = pen
            self.price = price

    item1 = item("might", 0, 0, 2, 0, 0, 50)
    item2 = item("armor", 20, 20, 0, 0, 0, 50)
    item3 = item("attack", 0, 0, 0, 1, 0, 50)
    item4 = item("def", 0, 0, 0, 0, 1, 50)
    item5 = item("heal", 0, 50, 0, 0, 0, 50)

    select = {
        1:item1,
        2:item2,
        3:item3,
        4:item4,
        5:item5,
        }

    productlist = {
        "-": "Что хотите купить?",
        1: "меч +" + str(item1.dmg),
        2: "броня +" + str(item2.maxhp),
        3: "тренировка защиты +" + str(item3.arm),
        4: "тренировка атаки +" + str(item4.pen),
        5: "лечение +" + str(item5.hp),
        }

    #    for key, value in select.items(): print(key, ':', vars(value))  эта строка была нужна чтобы вывести список предметов с атрибутами
    for key, value in productlist.items(): print(key, ':', value, file=TextWrapper(text))
    select_item = select[int(entry.get())]
    #на этом этапе в консоль выводится ошибка, так как сразу считывается ввод из entry, а он на момент запуска пустой. На работу не влияет
    if int(select_item.price) > gold:
        print("Недостаточно золота", file=TextWrapper(text))
    else:
        print("Куплен " + str(select_item.name), file=TextWrapper(text))
        gold -= select_item.price
        player.maxhp += select_item.maxhp
        player.hp = min(player.maxhp, player.hp + select_item.hp)
        player.dmg += select_item.dmg
        player.arm += select_item.arm
        player.pen += select_item.pen
        print(vars(player), file=indicatorWrapper(indicator))
        return status, player, gold




#основное окно
root = Tk()
root.geometry("1600x600")
root.title("Игра")

#команда для вывода текста на экран. в нее передается текст из функций в print:
class indicatorWrapper:
    def __init__(self, indicator_field: Text):
        self.indicator_field = indicator_field

    def write(self, indicator: str):
        self.indicator_field.insert(END, indicator)
        self.indicator_field.yview(END)

    def flush(self):
        self.indicator_field.update()
# создает поле текста. 1я команда создает поле. 2я выводит его на экран
indicator = Text(root, width=30, height=2)
indicator.pack(side=TOP, fill=BOTH)


class TextWrapper:
    def __init__(self, text_field: Text):
        self.text_field = text_field

    def write(self, text: str):
        self.text_field.insert(END, text)
        self.text_field.yview(END)

    def flush(self):
        self.text_field.update()
text = Text(root, width=100, height=20)
text.pack(side=LEFT, fill=BOTH, expand=1)

#text.pack(side=TOP, fill=BOTH)
#text.place(x=0, y=0)


class levelWrapper:
    def __init__(self, level_field: Text):
        self.level_field = level_field

    def write(self, leveltk: str):
        self.level_field.insert(END, leveltk)
        self.level_field.yview(END)

    def flush(self):
        self.level_field.update()
leveltk = Text(root, width=30, height=2)
leveltk.pack(side=TOP, fill=BOTH)


class goldWrapper:
    def __init__(self, gold_field: Text):
        self.gold_field = gold_field

    def write(self, goldtk: str):
        self.gold_field.insert(END, goldtk)
        self.gold_field.yview(END)

    def flush(self):
        self.gold_field.update()
goldtk = Text(root, width=30, height=2)
goldtk.pack(side=TOP, fill=BOTH)

class statusWrapper:
    def __init__(self, status_field: Text):
        self.status_field = status_field

    def write(self, statustk: str):
        self.status_field.insert(END, statustk)
        self.status_field.yview(END)

    def flush(self):
        self.status_field.update()
statustk = Text(root, width=30, height=2)
statustk.pack(side=TOP, fill=BOTH)





#создает скролл. root - размещен в основном окне, text.yview - скроллит поле текста text.pack()
scroll = Scrollbar(text, command=text.yview)
scroll.pack(side=RIGHT, fill=Y)

#это нужно для того чтобы размеры скрола подстраивались под окно. Чисто визуал и удобство
text.config(yscrollcommand = scroll.set)




buttonpacktk = Label(root, width=30, height=20, bg='#01579B', fg='#B3E5FC')
buttonpacktk.pack(side=TOP, fill=BOTH)

#кнопки
btn_fight = Button(buttonpacktk, text = "fight", command = fight)
#btn_fight.grid(row=0, column=0)

btn_down = Button(buttonpacktk, text = "down", command = down)
btn_down.grid(row=1, column=0)

btn_up = Button(buttonpacktk, text = "up", command = up)
#btn_up.grid(row=2, column=0)

btn_market = Button(buttonpacktk, text = "market", command = market)
btn_market.grid(row=3, column=0)

exitpacktk = Label(root, width=30, height=20, bg='#98FB9A', fg='#B3E5FC')
exitpacktk.pack(side=TOP, fill=BOTH)

btn_exit = Button(exitpacktk, text = "закрыть", command = quit)
btn_exit.grid(row=0, column=0)

#функция для удаления всех кнопок
def delbotton():
    btn_fight.grid_remove()
    btn_down.grid_remove()
    btn_up.grid_remove()
    btn_market.grid_remove()


#Поле для ввода
entry = Entry()
entry.pack(anchor=NW, padx=6, pady=6)
btn_buy = Button(root, text = "buy", command = market)
btn_buy.pack(side=TOP, fill=BOTH)



root.mainloop()
