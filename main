import pygame as pg
from heapq import *
import random
import sys



#переменные
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (125, 125, 125)
LIGHT_BLUE = (64, 128, 255)
GREEN = (0, 200, 64)
YELLOW = (225, 225, 0)
PINK = (230, 50, 230)
ForestGreen = (34, 139, 34)
RED = (255, 0, 0)

cols, rows = 23, 13 #количество клеток по горизонтали и вертикали
TILE = 50 #размер клетки

#временные переменные
speed = 10 #нужна для теста переменещения. Потом заменить на скорость персонажей
start = (0, 7) #стартовая позиция. Потом заменить на позицию при размещении персонажей

#начало поля. Это на будущее для общего смещения поля
mainfield_X = 0
mainfield_Y = 0


#функция создания круга для "змейки"
def get_circle(x, y):
    return (x * TILE + TILE // 2, y * TILE + TILE // 2), TILE // 4


#определить соседние клетки
def get_neighbours(x, y):
    check_neighbour = lambda x, y: True if 0 <= x < cols and 0 <= y < rows and grid[0][0] != 2 else False
    ways = [-1, 0], [0, -1], [1, 0], [0, 1]#, [-1, -1], [1, -1], [1, 1], [-1, 1]
    return [((grid[y + dy][x + dx]), (x + dx, y + dy)) for dx, dy in ways if check_neighbour(x + dx, y + dy) and (grid[y + dy][x + dx]) != 9]


def get_click_mouse_pos():
    x, y = pg.mouse.get_pos()
    grid_x, grid_y = x // TILE, y // TILE
    pg.draw.circle(sc, pg.Color('red'), *get_circle(grid_x, grid_y))
    click = pg.mouse.get_pressed()
    return (grid_x, grid_y) if click[0] else False

def get_mouse_pos():
    x, y = pg.mouse.get_pos()
    grid_x, grid_y = x // TILE, y // TILE
    pg.draw.circle(sc, pg.Color('red'), *get_circle(grid_x, grid_y))
    return (grid_x, grid_y)




def heuristic(a, b):
   return abs(a[0] - b[0]) + abs(a[1] - b[1])


# описание алгоритма на человеческом языке:
# (start, goal) - стартовая клетка (сначала именно старт, а потом клетка от которой идет текущий расчет), указанная клетка

# в queue формируются маршруты - последние клетки с ценой по каждому из возможных направлений
# из queue выбирается маршрут с наименьшей ценой и проверяются его соседи (цена соседей + цена посещеннйо клетки (cost_visited[cur_node] + neigh_cost)), после чего добавляются в queue
# и так далее пока не будет достигнута финальня точка
# формируется 2 списка - общий cost_visited (в нем все пути) и финальный visited (в котором только кратчайший и выглядит он как словарь в котором ключ (клетка): значение (пред.клетка)

def create_way(start, goal):
    global speed, grid

    #этот блок перебирает все клетки с присваивает им сложность прохождения
    graph = {}
    for y, row in enumerate(grid):
        for x, col in enumerate(row):
            graph[(x, y)] = graph.get((x, y), []) + get_neighbours(x, y)

    queue = [] #Это очередь. Или список приоритетных клеток. от которых далее идет расчет
    heappush(queue, (0, start)) #эта команда добавляет в очередь queue стартовую клетку
    cost_visited = {start: 0} #в этот справочник добавляются {координаты клетки: наименьшая цена пути до нее} {(0, 0): 0, (1, 0): 1, (0, 1): 1, (2, 0): 2, (1, 1): 2}
    visited = {start: None} #а это итоговый маршрут. В нем первончальной клетка + соседи. Потом добавляется сосденяя с лучшей ценой + уже ее соседи. И так далее.
    while queue:
        cur_cost, cur_node = heappop(queue)
        #heappop(queue) - возвращает наименьшее значение из queue
        if cur_node == goal:
            break
        neighbours = graph[cur_node] #это проверяет соседние клетки
        for neighbour in neighbours:
            neigh_cost, neigh_node = neighbour
            new_cost = cost_visited[cur_node] + neigh_cost
            if neigh_node not in cost_visited or new_cost < cost_visited[neigh_node]:
                #на этом этапе:
                #если новой клетки нет в списке посещенных (cost_visited)
                #или она есть, но ее цена ниже чем она есть в списке посещенных
                #то добавляется в список посещенных (cost_visited)
                #и добавляется в список приоритетных (queue)
                priority = new_cost + heuristic(neigh_node, goal) #heuristic - функция выше. Она выбирает клетку, которая ближе к той что выбрал пользователь (через сумму координат)
                heappush(queue, (priority, neigh_node)) #это ф-ция из библиотеки heapq. Она добавляет элелент (priority (цена), neigh_node (координаты клетки)) в список queue
                cost_visited[neigh_node] = new_cost
                visited[neigh_node] = cur_node #формирует итоговый маршрут который выглядит как справочник {(0, 6): None, (0, 5): (0, 6), (1, 6): (0, 6), (1, 5): (1, 6)}
                                               #(1, 5) - это ключ, по которому можно найти предмет - пред.клетку (1, 6)
                                               #это и передается на выход
    return visited




#матрица проходимости. Каждое число - шкала X.
grid = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],[], [], [], [], [], [], [], [], [], []]
field2 = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],[], [], [], [], [], [], [], [], [], []]



#______________________________________________________________________________________________________________________
#клетка
class tile():
    def __init__ (self, x, y, x_pos, y_pos, type, closed, diff):
        self.x = x
        self.y = y
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.type = type
        self.closed = closed
        self.diff = diff

#типы клеток
def none():
    global field, xy, tile, grid
    tile.type = "none"
    tile.x_pos = mainfield_X + TILE * (tile.x - 1)
    tile.y_pos = mainfield_Y + TILE * (tile.y - 1)
    tile.diff = 1
    none = tile(tile.x, tile.y, tile.x_pos, tile.y_pos, tile.type, "-", tile.diff)
    field[xy] = none
    grid[tile.y-1].append(tile.diff)
    field2[tile.y - 1].append(tile.type)
    return field, grid

def tree():
    global field, xy, tile, grid
    tile.type = "tree"
    tile.x_pos = mainfield_X + TILE * (tile.x - 1)
    tile.y_pos = mainfield_Y + TILE * (tile.y - 1)
    tile.diff = 9
    tree = tile(tile.x, tile.y, tile.x_pos, tile.y_pos, tile.type, "+", tile.diff)
    field[xy] = tree
    grid[tile.y - 1].append(tile.diff)
    field2[tile.y - 1].append(tile.type)
    return field, grid

def stone():
    global field, xy, tile, grid
    tile.type = "stone"
    tile.x_pos = mainfield_X + TILE * (tile.x - 1)
    tile.y_pos = mainfield_Y + TILE * (tile.y - 1)
    tile.diff = 2
    stone = tile(tile.x, tile.y, tile.x_pos, tile.y_pos, tile.type, "+", tile.diff)
    field[xy]=stone
    grid[tile.y - 1].append(tile.diff)
    field2[tile.y - 1].append(tile.type)
    return field, grid

#______________________________________________________________________________________________________________________
#создание поля
rnd_type = [none, tree, stone]
tile.x = 0
tile.y = 0
xy = 0
field = {
}

def create_battlefield(x,y):
    global xy
    for i in range(x):
        tile.x += 1
        tile.y = 0
        for j in range(y):
            tile.y += 1
            xy = str(tile.x) + "-" + str(tile.y)
            f = random.choices(rnd_type, weights=[5, 1, 1])
            rand_func = random.choice(f)
            rand_func()

#отрисовка поля. Общий старт


#______________________________________________________________________________________________________________________

#это необходимо для инициализации всех вложенных модулей
pg.init()

#окно программы
sc = pg.display.set_mode((1800, 1200))
clock = pg.time.Clock()


#позиция персонажа
def person_position(start):
    global TILE
    bg = pg.image.load('knight1.jpg').convert()
    bg = pg.transform.scale(bg, (TILE, TILE))
    sc.blit(bg, (start[0] * TILE, start[1] * TILE))




create_battlefield(cols, rows)
print(grid)
print(field2)

#отрисовка поля согласно созданной карте create_battlefield()
def explore():
    global TILE, cols, rows, mainfield_X, mainfield_Y

    mainfield_X_end = mainfield_X + cols * TILE
    mainfield_Y_end = mainfield_Y + rows * TILE

    main = pg.Rect(mainfield_X, mainfield_Y, mainfield_X_end-mainfield_X, mainfield_Y_end-mainfield_Y)
    pg.draw.rect(sc, (GREEN), main, 0)

    tile_x = 0
    for i in range(0, int(rows)+1):
        pg.draw.line(sc, (0, 0, 0), (mainfield_X, mainfield_Y + i * TILE), (mainfield_X_end, mainfield_Y + i * TILE))
    for j in range(0, int(cols)+1):
        pg.draw.line(sc, (0, 0, 0), (mainfield_X + j * TILE, mainfield_Y), (mainfield_X + j * TILE, mainfield_Y_end))
    for t in range(cols):
        tile_x += 1
        tile_y = 0
        for r in range(rows):
            tile_y += 1
            xxx = field.get(str(tile_x) + "-" + str(tile_y)).x
            yyy = field.get(str(tile_x) + "-" + str(tile_y)).y
            if field.get(str(tile_x) + "-" + str(tile_y)).type == "stone":
                bg = pg.image.load('rock1.png').convert()
                bg = pg.transform.scale(bg, (TILE, TILE))
                sc.blit(bg, (mainfield_X + TILE * (xxx - 1), mainfield_Y + TILE * (yyy - 1)))
                f1 = pg.font.Font(None, 24)
                text1 = f1.render(str(tile_x-1) + '-' + str(tile_y-1), 1, (180, 0, 0))
                sc.blit(text1, (mainfield_X+TILE*(xxx-1), mainfield_Y+TILE*(yyy-1)))
            elif field.get(str(tile_x) + "-" + str(tile_y)).type == "tree":
                bg = pg.image.load('Tree1.png').convert()
                bg = pg.transform.scale(bg, (TILE, TILE))
                sc.blit(bg, (mainfield_X+TILE*(xxx-1), mainfield_Y+TILE*(yyy-1)))
                f1 = pg.font.Font(None, 24)
                text1 = f1.render(str(tile_x-1) + '-' + str(tile_y-1), 1, (180, 0, 0))
                sc.blit(text1, (mainfield_X + TILE * (xxx - 1), mainfield_Y + TILE * (yyy - 1)))

#создание пути передвижения
#меняет позицию, если проверка прохождения была успешна
def cp():
    global path_headd, path_segmentt, visited, start, grid
    way = []
    while path_segmentt and path_segmentt in visited:
        path_segmentt = visited[path_segmentt]
        #создаем путь
        way.append(path_segmentt)
    #убираем из него последнее значение none
    way2 = way[:-1]
    diff = 0
    x = -2

    #цикл определяет клетку в которой сумма сложностей пройенных клеток становится выше скорости. Или если финальная клетка равная новой
    for i in way2:
        new_pos = way2[x]
        diff += grid[way2[x][1]][way2[x][0]]
        if diff >= speed:
            start = new_pos
        elif new_pos == way2[0]:
            start = path_headd
        else:
            x -= 1
    return start


# показывает путь без изменения позиции
# простыми словами
# visited - словарь с списком соседей {(0, 6): None, (0, 5): (0, 6), (1, 6): (0, 6), (1, 5): (1, 6), (1, 7): (1, 6), (2, 7): (1, 7)}
# в данном примере (2, 7) - это финальная точка. Цикл ниже перебирает клетки от ключа (2, 7) ищет привязанную к ней клетку (1, 7) и так далее пока не закончится.

def path():
    global path_head, path_segment, visited
    while path_segment and path_segment in visited:
        pg.draw.circle(sc, pg.Color('blue'), *get_circle(*path_segment))
        path_segment = visited[path_segment]
        pg.draw.circle(sc, pg.Color('magenta'), *get_circle(*path_head))
        pg.draw.circle(sc, pg.Color('green'), *get_circle(*start))


#основной цикл
while True:
    pg.draw.circle(sc, pg.Color('green'), *get_circle(*start))
    explore()
    person_position(start)

    for event in pg.event.get():
        if event.type == pg.QUIT:
            pg.quit()
            sys.exit()
        elif event.type == pg.MOUSEMOTION:
            mouse_move = get_mouse_pos()
            goal = mouse_move
            visited = create_way(start, mouse_move)
        elif event.type == pg.MOUSEBUTTONDOWN:
            if event.button == 1:
                mouse_clik = get_click_mouse_pos()
                #эти 3 строки переписать. Наверняка дублирует то что в самом низу
                goall = mouse_clik
                path_segmentt = goall
                path_headd = goall
                if mouse_clik:
                    cp()





    # отрисовка линии
    path_head = goal  # конец линии. Голова
    path_segment = goal  # элементы линии. сегмент
    path()


    pg.display.flip()
    clock.tick(30)



    for event in pg.event.get():
        if event.type == pg.QUIT:
            pg.quit()
